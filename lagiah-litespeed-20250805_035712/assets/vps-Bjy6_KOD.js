import{D as S,r as l,E as u}from"./index-CCw3ahY3.js";const p=S("vps",()=>{const i=l([]),o=l(!1),s=l(null),d=l(null),w=c;async function g(t){try{const e=await u.getVpsPassword(t);if(e&&e.status==="success")return e.data?.password;throw new Error(e?.message||"Failed to get VPS password.")}catch(e){throw e}}async function c(t){o.value=!0,s.value=null;try{const e=await u.getVPSList(t);if(e&&e.status==="success"&&e.data)return i.value=e.data?.items||[],e;throw new Error(e?.message||"Failed to fetch VPS accounts.")}catch(e){return s.value=e.message||"An error occurred while fetching VPS accounts.",{status:"error",message:s.value,error:e}}finally{o.value=!1}}async function m(t){o.value=!0,s.value=null;try{const e=await u.getVPSById(t);if(e&&e.status==="success"&&e.data)return d.value=e.data,e;throw new Error(e?.message||"Failed to fetch VPS details.")}catch(e){return s.value=e.message||"An error occurred while fetching VPS details.",{status:"error",message:s.value,error:e}}finally{o.value=!1}}async function v(t){o.value=!0,s.value=null;try{if(!t||typeof t!="object")throw new Error("Invalid VPS data: data must be an object");if(!t.provider)throw new Error("Provider name is required");if(!t.name)throw new Error("VPS name is required");const e=Object.fromEntries(Object.entries(t).map(([a,n])=>[a,n===void 0?null:n])),r=await u.createVPS(e);if(r&&r.status==="success"&&r.data)return await c(),r;{const a=r?.error?.message||(r?.error?.issues&&r.error.issues.length>0?r.error.issues.map(n=>n.message).join(", "):"Failed to create VPS.");throw s.value=a,new Error(a)}}catch(e){let r=e.message||"An error occurred during creation.";return e.error&&e.error.issues&&(r=e.error.issues.map(a=>a.message).join(", ")),s.value=r,{status:"error",message:r,error:e}}finally{o.value=!1}}async function h(t,e){o.value=!0,s.value=null;try{const r=Object.fromEntries(Object.entries(e).map(([n,f])=>[n,f===void 0?null:f])),a=await u.updateVPS(t,r);if(a&&a.status==="success"&&a.data)return await c(),a;throw new Error(a?.message||"Failed to update VPS.")}catch(r){return s.value=r.message||"An error occurred during update.",{status:"error",message:s.value,error:r}}finally{o.value=!1}}async function P(t){o.value=!0,s.value=null;try{const e=await u.deleteVPS(t),r=e.data?e.data:e;if(r&&r.status==="success")return await c(),r;throw new Error(r?.message||"Failed to delete VPS.")}catch(e){return s.value=e.message||"An error occurred during deletion.",{status:"error",message:s.value,error:e}}finally{o.value=!1}}return{vpsList:i,loading:o,error:s,selectedVPS:d,fetchVPSList:c,fetchVPSAccounts:w,fetchVPSById:m,createVPS:v,updateVPS:h,deleteVPS:P,getVpsPassword:g}});export{p as u};
